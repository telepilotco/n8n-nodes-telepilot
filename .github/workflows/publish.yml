# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Publish to NPM registry and Dockerhub

# on:
#   push:
#     branches: [ "master" ]
#   pull_request:
#     branches: [ "master" ]

on:
  workflow_dispatch

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.16.1]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - run: npm install -g pnpm
    - run: npm ci
    - run: npm run build --if-present
#    - run: npm test
    - name: Use NPM Token
      # You may pin to the exact commit or the version.
      # uses: dkershner6/use-npm-token-action@99c5b17c84a15e44fdcef6712b34b76f8f0493b0
      uses: dkershner6/use-npm-token-action@v1
      with:
        # An NPM token with whatever access is needed for your GitHub Action workflow
        token: ${{ secrets.REGISTRY_TOKEN }}
        # The location of your Node workspace (needs to be a sibling of package.json)
  #      workspace: # optional, default is ./

    - run: npm pack
    - uses: actions/upload-artifact@v3
      with:
        name: telepilot
        path: package

#    - run: npm publish

  build-and-test-in-docker:
    needs: [build]
    name: linux-${{ matrix.platform }}-${{ matrix.libc }} - build the node addon in docker
    runs-on: [ ubuntu-latest ]
    strategy:
      fail-fast: false
      matrix:
        platform:
          - x64
          - arm64
        libc:
          - glibc
          - musl
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: telepilot
          path: telepilotco-n8n-nodes-telepilot-0.2.0.tgz
      - run: tree .
      - run: docker run --privileged --rm tonistiigi/binfmt --install arm64
        if: matrix.platform == 'arm64'
      - name: Build musl docker image with current build package
        if: matrix.libc == 'musl'
        run: |
          cat > Dockerfile <<EOF
          FROM n8nio/n8n:1.21.0
          ARG KEY

          RUN mkdir -p /home/node/.n8n/nodes
          COPY package/telepilotco-n8n-nodes-telepilot-0.2.0.tgz /home/node/.n8n/nodes/
          RUN npm config set registry http://npm.telepilot.co:4873/

          RUN cat /home/node/.npmrc

          RUN cd /home/node/.n8n/nodes && ls -laR && npm install telepilotco-n8n-nodes-telepilot-0.2.0.tgz

          RUN N8N_ENCRYPTION_KEY=$KEY n8n import:credentials -i /home/node/.n8n/nodes/node_modules/@telepilotco/n8n-nodes-telepilot/deploy/n8n-imports/credentials/credential-41.json
          RUN n8n import:workflow -i /home/node/.n8n/nodes/node_modules/@telepilotco/n8n-nodes-telepilot/deploy/n8n-imports/workflows/Telepilot_getMe.json
          RUN cat /home/node/.n8n/config

          ENTRYPOINT ["tini", "--", "/docker-entrypoint.sh"]
          EOF
          docker build . \
            --network=host \
            --no-cache \
            -t n8n-alpine-dockerfile-installation \
            --progress=plain \
            --build-arg KEY=${{ secrets.N8N_KEY }}
      - name: Run n8n in docker image
        if: matrix.libc == 'musl'
        run: |
          docker run ${{ matrix.platform == 'arm64' && '--platform linux/arm64' || '' }} \
            -it --rm \
            --name n8n-alpine-dockerfile-installation \
            -p 5678:5678 \
            -e DEBUG=tdl,telepilot-cred,telepilot-node,telepilot-trigger,telepilot-cm \
            -e EXECUTIONS_PROCESS=main \
            -e N8N_LOG_LEVEL=debug \
            n8n-alpine-dockerfile-installation execute --id r2a0u5tez9fg1WW6
      - name: Install Telepilot in Ubuntu n8n
        if: matrix.libc == 'glibc'
        run: |
          mkdir -p ~/.n8n/nodes && cp package/telepilotco-n8n-nodes-telepilot-0.2.0.tgz ~/.n8n/nodes && cd ~/.n8n/nodes
          npm config set registry http://npm.telepilot.co:4873/
          npm install telepilotco-n8n-nodes-telepilot-0.2.0.tgz
      - name: Run n8n in Ubuntu n8n
        run: |
          N8N_HOST=0.0.0.0 N8N_PORT=5678 N8N_ENCRYPTION_KEY=${{ secrets.N8N_KEY }} npx n8n \
            import:credentials -i ~/.n8n/nodes/node_modules/@telepilotco/n8n-nodes-telepilot/deploy/n8n-imports/credentials/credential-41.json
          npx n8n \
            import:workflow -i /home/node/.n8n/nodes/node_modules/@telepilotco/n8n-nodes-telepilot/deploy/n8n-imports/workflows/Telepilot_getMe.json
          npx n8n \
            execute --id r2a0u5tez9fg1WW6

